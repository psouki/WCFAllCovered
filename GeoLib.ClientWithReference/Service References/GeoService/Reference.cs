//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeoLib.ClientWithReference.GeoService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GeoService.IGeoService")]
    public interface IGeoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetZipInfo", ReplyAction="http://tempuri.org/IGeoService/GetZipInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GeoLib.Contracts.NotFoundData), Action="http://tempuri.org/IGeoService/GetZipInfoNotFoundDataFault", Name="NotFoundData", Namespace="http://schemas.datacontract.org/2004/07/GeoLib.Contracts")]
        GeoLib.Contracts.ZipCodeData GetZipInfo(string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetZipInfo", ReplyAction="http://tempuri.org/IGeoService/GetZipInfoResponse")]
        System.Threading.Tasks.Task<GeoLib.Contracts.ZipCodeData> GetZipInfoAsync(string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetStates", ReplyAction="http://tempuri.org/IGeoService/GetStatesResponse")]
        System.Collections.Generic.List<string> GetStates(bool primaryOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetStates", ReplyAction="http://tempuri.org/IGeoService/GetStatesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetStatesAsync(bool primaryOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetZipByState", ReplyAction="http://tempuri.org/IGeoService/GetZipByStateResponse")]
        System.Collections.Generic.List<GeoLib.Contracts.ZipCodeData> GetZipByState(string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetZipByState", ReplyAction="http://tempuri.org/IGeoService/GetZipByStateResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GeoLib.Contracts.ZipCodeData>> GetZipByStateAsync(string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetZipForRange", ReplyAction="http://tempuri.org/IGeoService/GetZipForRangeResponse")]
        System.Collections.Generic.List<GeoLib.Contracts.ZipCodeData> GetZipForRange(string zip, int range);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetZipForRange", ReplyAction="http://tempuri.org/IGeoService/GetZipForRangeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GeoLib.Contracts.ZipCodeData>> GetZipForRangeAsync(string zip, int range);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/UpdateZipCity", ReplyAction="http://tempuri.org/IGeoService/UpdateZipCityResponse")]
        void UpdateZipCity(string zip, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/UpdateZipCity", ReplyAction="http://tempuri.org/IGeoService/UpdateZipCityResponse")]
        System.Threading.Tasks.Task UpdateZipCityAsync(string zip, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/UpdateZipCityBatch", ReplyAction="http://tempuri.org/IGeoService/UpdateZipCityBatchResponse")]
        void UpdateZipCityBatch(System.Collections.Generic.List<GeoLib.Contracts.ZipCityData> zipCityData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/UpdateZipCityBatch", ReplyAction="http://tempuri.org/IGeoService/UpdateZipCityBatchResponse")]
        System.Threading.Tasks.Task UpdateZipCityBatchAsync(System.Collections.Generic.List<GeoLib.Contracts.ZipCityData> zipCityData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGeoServiceChannel : GeoLib.ClientWithReference.GeoService.IGeoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GeoServiceClient : System.ServiceModel.ClientBase<GeoLib.ClientWithReference.GeoService.IGeoService>, GeoLib.ClientWithReference.GeoService.IGeoService {
        
        public GeoServiceClient() {
        }
        
        public GeoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GeoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GeoLib.Contracts.ZipCodeData GetZipInfo(string zip) {
            return base.Channel.GetZipInfo(zip);
        }
        
        public System.Threading.Tasks.Task<GeoLib.Contracts.ZipCodeData> GetZipInfoAsync(string zip) {
            return base.Channel.GetZipInfoAsync(zip);
        }
        
        public System.Collections.Generic.List<string> GetStates(bool primaryOnly) {
            return base.Channel.GetStates(primaryOnly);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetStatesAsync(bool primaryOnly) {
            return base.Channel.GetStatesAsync(primaryOnly);
        }
        
        public System.Collections.Generic.List<GeoLib.Contracts.ZipCodeData> GetZipByState(string state) {
            return base.Channel.GetZipByState(state);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GeoLib.Contracts.ZipCodeData>> GetZipByStateAsync(string state) {
            return base.Channel.GetZipByStateAsync(state);
        }
        
        public System.Collections.Generic.List<GeoLib.Contracts.ZipCodeData> GetZipForRange(string zip, int range) {
            return base.Channel.GetZipForRange(zip, range);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GeoLib.Contracts.ZipCodeData>> GetZipForRangeAsync(string zip, int range) {
            return base.Channel.GetZipForRangeAsync(zip, range);
        }
        
        public void UpdateZipCity(string zip, string city) {
            base.Channel.UpdateZipCity(zip, city);
        }
        
        public System.Threading.Tasks.Task UpdateZipCityAsync(string zip, string city) {
            return base.Channel.UpdateZipCityAsync(zip, city);
        }
        
        public void UpdateZipCityBatch(System.Collections.Generic.List<GeoLib.Contracts.ZipCityData> zipCityData) {
            base.Channel.UpdateZipCityBatch(zipCityData);
        }
        
        public System.Threading.Tasks.Task UpdateZipCityBatchAsync(System.Collections.Generic.List<GeoLib.Contracts.ZipCityData> zipCityData) {
            return base.Channel.UpdateZipCityBatchAsync(zipCityData);
        }
    }
}
